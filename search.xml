<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ学习(二)</title>
      <link href="2019/11/07/rabbitmq-xue-xi-er/"/>
      <url>2019/11/07/rabbitmq-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<p>在之前的RabbitMQ中，讲了四种交换机的规则和用法，现在我们来说说RabbitMQ中的消息回调，也就是消息确认。</p><h6 id="消息回调"><a href="#消息回调" class="headerlink" title="消息回调"></a>消息回调</h6><p>只需要实现回调配置以及回调函数即可</p><ul><li>首先需要在配置文件中添加消息回调的配置项</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 消息确认配置项</span><span class="token comment" spellcheck="true"># 确认消息已发送到交换机(Exchange)</span><span class="token comment" spellcheck="true"># spring.rabbitmq.publisher-confirms=true</span><span class="token attr-name">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">=</span><span class="token attr-value">simple</span><span class="token comment" spellcheck="true"># 确认消息已经发送到队列(Queue)</span><span class="token attr-name">spring.rabbitmq.publisher-returns</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><a id="more"></a><ul><li>配置相关的消息回调函数</li></ul><p>在MQ配置类中实现回调函数：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 消息确认回调函数** @param connectionFactory* @return*/</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> RabbitTemplate <span class="token function">createRabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置开启Mandatory,才能触发回调函数,无论消息推送结果怎么样都强制调用回调函数</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消息发送回调</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>correlationData<span class="token punctuation">,</span> ack<span class="token punctuation">,</span> cause<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConfirmCallback:     "</span> <span class="token operator">+</span> <span class="token string">"相关数据："</span> <span class="token operator">+</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConfirmCallback:     "</span> <span class="token operator">+</span> <span class="token string">"确认情况："</span> <span class="token operator">+</span> ack<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConfirmCallback:     "</span> <span class="token operator">+</span> <span class="token string">"原因："</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消息接收回调</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnCallback:     "</span> <span class="token operator">+</span> <span class="token string">"消息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnCallback:     "</span> <span class="token operator">+</span> <span class="token string">"回应码："</span> <span class="token operator">+</span> replyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnCallback:     "</span> <span class="token operator">+</span> <span class="token string">"回应信息："</span> <span class="token operator">+</span> replyText<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnCallback:     "</span> <span class="token operator">+</span> <span class="token string">"交换机："</span> <span class="token operator">+</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnCallback:     "</span> <span class="token operator">+</span> <span class="token string">"路由键："</span> <span class="token operator">+</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>RabbitMQ中消息的推送包含四种情况：</p><p>情况一： 消息推送到server，但是在server里找不到交换机 ， 这个交换机是没有创建没有配置的 </p><p>结论： 这种情况触发的是 ConfirmCallback 回调函数。 </p><p>情况二：消息推送到server，找到交换机了，但是没找到队列 </p><p>结论：  这种情况触发的是 ConfirmCallback 和 RetrunCallback 两个回调函数。 </p><p>情况三：消息推送到sever，交换机和队列啥都没找到 （和情况一相类似）</p><p>结论： 这种情况触发的是 ConfirmCallback 回调函数。</p><p>情况四： 消息推送成功 </p><p>结论： 这种情况触发的是 ConfirmCallback 回调函数。</p><h6 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h6><p>和生产者的消息确认机制不同，消费者本来就是在监听消息，符合条件的消息就会消费下来；所以，消息接收确认机制主要有是三种：</p><p>第一种：<strong>自动确认</strong>，这也是默认的消息确认情况。 AcknowledgeMode.AUTO</p><p>RabbitMQ成功将消息发出（即将消息成功写入TCP Socket）中立即认为本次投递已经被正确处理，不管消费者端是否成功处理本次投递。<br>所以这种情况如果消费端消费逻辑抛出异常，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。<br>一般这种情况我们都是使用try catch捕捉异常后，打印日志用于追踪数据，这样找出对应数据再做后续处理。</p><p>第二种：<strong>不确认</strong>，这个不做介绍。AcknowledgeMode.NONE</p><p>第三种：<strong>手动确认</strong>，使用最多的模式。AcknowledgeMode.MANUAL</p><p>basic.ack用于肯定确认<br>basic.nack用于否定确认（注意：这是AMQP 0-9-1的RabbitMQ扩展）<br>basic.reject用于否定确认，但与basic.nack相比有一个限制:一次只能拒绝单条消息<br>消费者端以上的3个方法都表示消息已经被正确投递，但是basic.ack表示消息已经被正确处理，但是basic.nack,basic.reject表示没有被正确处理，但是RabbitMQ中仍然需要删除这条消息。</p><ul><li>新建消息确认配置类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 消费者消息确认机制处理&lt;p> * 代码描述&lt;p> * Copyright: Copyright (C) 2019 XXX, Inc. All rights reserved. &lt;p> * * @author WQL * @since 2019年10月23日 0023 14:24 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListenerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CachingConnectionFactory connectionFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 自己写的Direct消息接收处理类     * 消费者类     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Receiver receiver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 自己写的MQ配置类(包含队列相关信息)     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitConfig rabbitConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleMessageListenerContainer <span class="token function">simpleMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMessageListenerContainer</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConcurrentConsumers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setMaxConcurrentConsumers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// RabbitMQ默认是自动确认，这里改为手动确认消息</span>        container<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setQueues</span><span class="token punctuation">(</span>rabbitConfig<span class="token punctuation">.</span><span class="token function">helloQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>消费者消息确认代码</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelAwareMessageListener</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 该消费者者实现了对hello队列的消费     * 消费操作为输出消息的字符内容     *     * @param message     */</span>    <span class="token comment" spellcheck="true">/*@RabbitHandler    public void process(Map message) {        System.out.println("Receiver : " + message.toString());    }*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 因为传递消息的时候用的map传递,所以将Map从Message内取出需要做些处理</span>            String msg <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 可以点进Message里面看源码,单引号直接的数据就是我们的map消息数据</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> msgArray <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> msgMap <span class="token operator">=</span> <span class="token function">mapStringToMap</span><span class="token punctuation">(</span>msgArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String messageId <span class="token operator">=</span> msgMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"messageId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String messageData <span class="token operator">=</span> msgMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"messageData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String createTime <span class="token operator">=</span> msgMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"messageId:"</span> <span class="token operator">+</span> messageId <span class="token operator">+</span> <span class="token string">"  messageData:"</span> <span class="token operator">+</span> messageData <span class="token operator">+</span> <span class="token string">"  createTime:"</span> <span class="token operator">+</span> createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">mapStringToMap</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String key <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>控制台出现<code>messageId:f53a85b8-d6aa-4a2b-9ed2-f26ff7b95df3  messageData:test message!  createTime:2019-10-23 16:40:31</code>就说明手动确认消息设置成功。</p><p>文章代码：<a href="https://github.com/Passion-Logan/CodePractice/tree/master/rabbitmq" target="_blank" rel="noopener">RabbitMQ</a></p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA8内置函数式接口</title>
      <link href="2019/10/27/java8-nei-zhi-han-shu-shi-jie-kou/"/>
      <url>2019/10/27/java8-nei-zhi-han-shu-shi-jie-kou/</url>
      
        <content type="html"><![CDATA[<p>Lambda表达式与函数式接口的关系：</p><p>Lambda是函数式接口实现的快捷方式，它相当于函数式接口实现的实例，因为在方法中可以使用Object作为参数，所以把Lambda表达式作为方法参数也不是不可以。</p><p>函数式接口只有一个抽象方法，并且没有重写Object类中的方法(public方法除外)，可以有默认方法和静态方法。</p><a id="more"></a><p><strong>自定义函数式接口一般用注解 @Functionallnterface标注</strong></p><p>在使用Lambda表达式作为参数的时候必须使用函数式接口来接收参数，Java8已经定义好了一些内置的函数式接口，可以解决开发过程中绝大部分为题，小部分特殊的问题需要自定义函数式接口。</p><p>例子：过滤集合中大于100的数字</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">filterInt</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>Integer<span class="token operator">></span> pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">172</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">82</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">filterInt</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> x <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>更多接口详见：<a href="https://www.runoob.com/java/java8-functional-interfaces.html" target="_blank" rel="noopener">Java 8函数式接口</a></p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之请求参数详解</title>
      <link href="2019/10/20/springboot-zhi-qing-qiu-can-shu-xiang-jie/"/>
      <url>2019/10/20/springboot-zhi-qing-qiu-can-shu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h6 id="SpringBoot获取参数的几种方式"><a href="#SpringBoot获取参数的几种方式" class="headerlink" title="SpringBoot获取参数的几种方式"></a>SpringBoot获取参数的几种方式</h6><ul><li><p>直接把表单参数写在Controller对应的方法的形参中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 适用于get方式提交，不适用于post方式提交</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addUser1</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username is:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password is:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"demo/index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><a id="more"></a></li><li><p>通过HttpServletRequest接收</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// get和post方式都可以</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addUser2</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String username<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username is:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password is:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"demo/index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>通过一个Bean来接收</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// get和post方式都可以</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addUser3</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username is:"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password is:"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"demo/index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>通过@PathVariable获取路径中的参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 例如:访问http://localhost/SSMDemo/demo/addUser4/lixiaoxi/111111 路径时，则自动将URL中模板变量{username}和{password}绑定到通过@PathVariable注解的同名参数上，即入参后username=lixiaoxi、password=111111   @RequestMapping(value="/addUser4/{username}/{password}",method=RequestMethod.GET)</span><span class="token keyword">public</span> String <span class="token function">addUser4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username is:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password is:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"demo/index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>通过@ModelAttribute注解获取Post请求的Form表单数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 不做此注释也能拿到user对象</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/helloWorld"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"helloWorld"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>使用@RequestParam绑定请求参数到方法入参</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 当请求参数username不存在时会有异常发生,可以通过设置属性required=false解决,例如: @RequestParam(value="username", required=false)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/addUser5"</span><span class="token punctuation">,</span>method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">addUser4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"password"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username is:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password is:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"demo/index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h6 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a>注解详解</h6><ul><li><p>@PathVariable</p><p>通过 @PathVariable 可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中@PathVariable(“xxx“) ，请求的路径中需要与占位符的参数一一对应</p></li><li><p>@RequestParam</p><p>可将请求参数绑定至方法参数， 此时要求controller方法中的参数名称要跟form中参数名称一致，该注解有三个属性：</p><ul><li>value：请求参数名，必须配置</li><li>required：是否必须，默认为true，即请求参数中必须包含该参数，如果没包含，将会抛出异常</li><li>defaultValue：默认值，如果设置了该值，required将自动设为false，无论你是否配置了required，配置了什么值，都是 false </li></ul><p>用来处理Content-Type: 为 application/x-www-form-urlencoded编码的内容。提交方式为get或post。（Http协议中，如果不指定Content-Type，则默认传递的参数就是application/x-www-form-urlencoded类型）</p><p>RequestParam实质是将Request.getParameter() 中的Key-Value参数Map利用Spring的转化机制ConversionService配置，转化成参数接收对象或字段。</p><p>get方式中query String的值，和post方式中body data的值都会被Servlet接受到并转化到Request.getParameter()参数集中，所以@RequestParam可以获取的到。</p></li><li><p>@RequestBody</p><p>@RequestBody注解可以接收<strong>json格式</strong>的数据，并将其转换成对应的数据类型。 最常见的就是接收一个json格式的实体对象；</p><p>该注解处理HttpEntity传递过来的数据，一般用来处理非Content-Type: application/x-www-form-urlencoded编码格式的数据。</p><p>GET请求中，因为没有HttpEntity，所以@RequestBody并不适用。<br>POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type，SpringMVC通过使用HandlerAdapter 配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到相应的bean上。</p><p>@RequestBody用于post请求，<strong>不能用于get请求</strong></p></li><li><p>@ModelAttribute</p><p>该注解类型将参数绑定到Model对象 ，form表单中的参数name要和实体的属性名对应。</p><p>有点类似于@RequestBody接收实体，只不过不能接收json格式的数据</p></li></ul><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cron表达式详解</title>
      <link href="2019/07/05/cron-biao-da-shi-xiang-jie/"/>
      <url>2019/07/05/cron-biao-da-shi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>cron表达式的时间格式： <code>s m h d(?) m w(?) y</code> 分别对应 秒&gt;分&gt;时&gt;日&gt;月&gt;周&gt;年</p><p>举个栗子说说：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 每天23:59 分执行</span><span class="token number">0</span> <span class="token number">59</span> <span class="token number">23</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span> <span class="token comment" spellcheck="true">// 每天11:01,11:02,11:03; 12:01,12:02,12:03分执行任务</span><span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span></code></pre><a id="more"></a><p>在表达式中，每个域除允许设置数字外，还可以使用一些通配符。</p><ul><li>*<em>星号(</em>)**：可用在所有字段中，表示对应时间域的每一个时刻。在 秒 中，表示每一秒</li><li>**问号(?)**：只能用在日和周的域中，通常指定为无意义的值，可以理解为占位符</li><li>**减号(-)**：表达一个时间范围， 比如在 小时中 1-2 表示1点到2点</li><li>**逗号(,)**：表达一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五</li><li>*<em>斜杠(/)**：x/y表达一个等步长序列，x为起始值，y为增量步长值。如秒中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用</em>/y，它等同于0/y</li><li>**井号(#)**：仅能用于周域中。它用于指定月份中的第几周的哪一天。例如，如果你指定周域的值为6#3，它意思是某月的第三个周五 (6=星期五，#3意味着月份中的第三周)。另一个例子2#1意思是某月的第一个星期一 (2=星期一，#1意味着月份中的第一周)。注意，假如你指定#5，然而月份中没有第 5 周，那么该月不会触发。</li><li><strong>字母—L</strong>：L 说明了某域上允许的最后一个值。它仅被日和周域支持。当用在日域上，表示的是在月域上指定的月份的最后一天。例如，当月域上指定了JAN 时，在日域上的L会促使 trigger 在1月31号被触发。假如月域上是SEP，那么 L 会预示着在9月30号触发。换句话说，就是不管指定了哪个月，都是在相应月份的时最后一天触发 trigger。</li><li><strong>字母—W</strong>：W 字符代表着平日 (Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。例如，日域中的15W 意味着 “离该月15号的最近一个平日。” 假如15号是星期六，那么 trigger 会在14号(星期五)触发，因为星期四比星期一（这个例子中是17号）离15号更近。（译者Unmi注：不会在17号触发的，如果是15W，可能会是在14号(15号是星期六)或者15号(15号是星期天)触发，也就是只能出现在邻近的一天，如果15号当天为平日直接就会当日执行）。W只能用在指定的日域为单天，不能是范围或列表值。</li><li><strong>字母—C</strong>：C 字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。</li><li><strong>LW</strong>:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </li></ul><table><thead><tr><th>名称</th><th>是否必须</th><th>允许值</th><th>特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>时</td><td>是</td><td>0-23</td><td>, - * /</td></tr><tr><td>日</td><td>是</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月</td><td>是</td><td>1-12 或 JAN-DEC</td><td>, - * /</td></tr><tr><td>周</td><td>是</td><td>1-7 或 SUN-SAT</td><td>, - * ? / L C #</td></tr><tr><td>年</td><td>否</td><td>空 或 1970-2099</td><td>, - * /</td></tr></tbody></table><p>常用表达式：</p><ol><li><strong>0 10,44 14 ? 3 WED</strong>    每年三月的星期三的下午2:10和2:44触发 </li><li><strong>0 15 10 ? * MON-FRI</strong>    周一至周五的上午10:15触发 </li><li><strong>0 15 10 L * ?</strong>    每月最后一日的上午10:15触发 </li><li><strong>0 15 10 ? * 6L</strong>    每月的最后一个星期五上午10:15触发 </li><li><strong>0 15 10 ? * 6L 2002-2005</strong>   2002年至2005年的每月的最后一个星期五上午10:15触发 </li><li><strong>0 15 10 ? * 6#3</strong>   每月的第三个星期五上午10:15触发</li></ol><p>注：</p><p><code>“？”字符仅被用于天（日）和天（周）两个子表达式，表示不指定值 ,当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”</code></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java锁的分类总结</title>
      <link href="2019/07/03/java-suo-de-fen-lei-zong-jie/"/>
      <url>2019/07/03/java-suo-de-fen-lei-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>锁在Java中充当了十分重要的角色，不同的锁在不同的场景下能够大大提高程序的运行效率。文章将对不同锁做一个简单的总结。</p><p>首先附上两张分类图：</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/1.png"></p><a id="more"></a><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/2.png"></p><h3 id="乐观锁-VS-悲观锁"><a href="#乐观锁-VS-悲观锁" class="headerlink" title="乐观锁 VS 悲观锁"></a>乐观锁 VS 悲观锁</h3><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p><p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p><p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v1-1.png"></p><p>根据从上面的概念描述我们可以发现：</p><ul><li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li><li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li></ul><p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ------------------------- 悲观锁的调用方式 -------------------------</span><span class="token comment" spellcheck="true">// synchronized</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 操作同步资源</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ReentrantLock</span><span class="token comment" spellcheck="true">// 需要保证多个线程使用的是同一个锁</span><span class="token keyword">private</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyPublicResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span>        <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 操作同步资源</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ------------------------- 乐观锁的调用方式 -------------------------</span><span class="token comment" spellcheck="true">// 需要保证多个线程使用的是同一个</span><span class="token keyword">private</span> AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行自增1</span>AtomicInteger atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。</p><p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p><p>CAS算法涉及到三个操作数：</p><ul><li>需要读写的内存值 V。</li><li>进行比较的值 A。</li><li>要写入的新值 B。</li></ul><p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p><p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v1-2.png"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ------------------------- JDK 8 -------------------------</span><span class="token comment" spellcheck="true">// AtomicInteger 自增方法</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Unsafe.class</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> var5<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> var5<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ------------------------- OpenJDK 8 -------------------------</span><span class="token comment" spellcheck="true">// Unsafe.java</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        v <span class="token operator">=</span> <span class="token function">getIntVolatile</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> v<span class="token punctuation">,</span> v <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p><p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p><p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p><ol><li><strong>ABA问题</strong>。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。<ul><li>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</li></ul></li><li><strong>循环时间长开销大</strong>。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</li><li><strong>只能保证一个共享变量的原子操作。</strong>对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。<ul><li>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</li></ul></li></ol><h3 id="自旋锁-VS-适应性自旋锁"><a href="#自旋锁-VS-适应性自旋锁" class="headerlink" title="自旋锁 VS 适应性自旋锁"></a>自旋锁 VS 适应性自旋锁</h3><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v2-1.png"></p><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p><p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v2-2.png"></p><p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><p>在自旋锁中 另有三种常见的锁形式:TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。</p><h3 id="无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁"><a href="#无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁" class="headerlink" title="无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁"></a>无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h3><p>这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p><p>首先为什么Synchronized能实现线程同步？</p><p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p><p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p><p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p><p><strong>Mark Word</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p><p><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p><strong>Monitor</strong></p><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p><p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p><p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p><p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p><p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。<code>锁状态只能升级不能降级。</code></p><p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p><table><thead><tr><th align="left">锁状态</th><th align="left">存储内容</th><th align="left">存储内容</th></tr></thead><tbody><tr><td align="left">无锁</td><td align="left">对象的hashCode、对象分代年龄、是否是偏向锁（0）</td><td align="left">01</td></tr><tr><td align="left">偏向锁</td><td align="left">偏向线程ID、偏向时间戳、对象分代年龄、是否是偏向锁（1）</td><td align="left">01</td></tr><tr><td align="left">轻量级锁</td><td align="left">指向栈中锁记录的指针</td><td align="left">00</td></tr><tr><td align="left">重量级锁</td><td align="left">指向互斥量（重量级锁）的指针</td><td align="left">10</td></tr></tbody></table><p><strong>无锁</strong></p><p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p><p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p><p><strong>偏向锁</strong></p><p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p><p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p><p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。<code>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</code></p><p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p><p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p><p><strong>轻量级锁</strong></p><p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p><p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p><p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p><p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><p><strong>重量级锁</strong></p><p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v3-1.png"></p><p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><h3 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a>公平锁 VS 非公平锁</h3><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v4-1.png"></p><p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p><p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v4-2.png"></p><p>接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v4-3.png"></p><p>根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p><p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v4-4.png"></p><p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v4-5.png"></p><p>再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</p><p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p><h3 id="可重入锁-VS-非可重入锁"><a href="#可重入锁-VS-非可重入锁" class="headerlink" title="可重入锁 VS 非可重入锁"></a>可重入锁 VS 非可重入锁</h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Widget</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法1执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法2执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p><p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p><p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p><p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v5-1.png"></p><p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v5-2.png"></p><p>之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p><p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p><p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。</p><p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v5-3.png"></p><h3 id="独享锁-VS-共享锁"><a href="#独享锁-VS-共享锁" class="headerlink" title="独享锁 VS 共享锁"></a>独享锁 VS 共享锁</h3><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p><p>下图为ReentrantReadWriteLock的部分源码：</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v6-1.png"></p><p>我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p><p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</p><p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。 在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p><p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v6-2.png"></p><p>了解了概念之后我们再来看代码，先看写锁的加锁源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取到当前锁的个数</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 取写锁的个数w</span>    <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 如果已经有线程持有了锁(c!=0)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// (Note: if c != 0 and w == 0 then shared count != 0)</span>        <span class="token comment" spellcheck="true">// 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Reentrant acquire</span>        <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果c=0，w=0或者c>0，w>0（重入），则设置当前线程或锁的拥有者</span>    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li><li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li><li>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li><li>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</li><li>如果c=0,w=0或者c&gt;0,w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li></ul><p>tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p><p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p><p>接着是读锁的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token comment" spellcheck="true">// 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态</span>        <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> current<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                                       <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">sharedCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">readerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        r <span class="token operator">&lt;</span> MAX_COUNT <span class="token operator">&amp;&amp;</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> SHARED_UNIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstReader <span class="token operator">=</span> current<span class="token punctuation">;</span>            firstReaderHoldCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstReader <span class="token operator">==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>            firstReaderHoldCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            HoldCounter rh <span class="token operator">=</span> cachedHoldCounter<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">==</span> null <span class="token operator">||</span> rh<span class="token punctuation">.</span>tid <span class="token operator">!=</span> <span class="token function">getThreadId</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>                cachedHoldCounter <span class="token operator">=</span> rh <span class="token operator">=</span> readHolds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                readHolds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rh<span class="token punctuation">)</span><span class="token punctuation">;</span>            rh<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">fullTryAcquireShared</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p><p>此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：</p><p><img src="/images/Java%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/v6-3.png"></p><p>我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>本文Java中常用的锁以及常见的锁的概念进行了基本介绍，并从源码以及实际应用的角度进行了对比分析。限于篇幅以及个人水平，没有在本篇文章中对所有内容进行深层次的讲解。</p><p>其实Java本身已经对锁本身进行了良好的封装，降低了研发同学在平时工作中的使用难度。但是研发同学也需要熟悉锁的底层原理，不同场景下选择最适合的锁。而且源码中的思路都是非常好的思路，也是值得大家去学习和借鉴的。</p><p>转自：<a href="https://tech.meituan.com/2018/11/15/java-lock.html" target="_blank" rel="noopener">不可不说的Java“锁”事</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习(一)</title>
      <link href="2019/06/03/rabbitmq-xue-xi-yi/"/>
      <url>2019/06/03/rabbitmq-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p>队列服务，一般涉及到三个概念：生产者、队列、消费者；RabbitMQ在生产者和队列之间加入了<code>交换器(Exchange)</code>便于交互；避免生产者与队列的直接交互，而是生产者发送消息给交换器，交换器根据调度策略给队列。</p><p><img src="/images/RabbitMQ%E5%AD%A6%E4%B9%A0-%E4%B8%80%5C1-1.png" alt="相关概念"></p><a id="more"></a><ul><li>上图中 P 代表生产者；</li><li>中间是 RabbitMQ 包括交换机 和 队列；</li><li>上图中 C 代表消费者；</li></ul><p>在RabbitMQ中比较重要的四个概念：<code>虚拟主机、交换机、队列、绑定</code></p><ul><li>虚拟主机：一个虚拟主机持有一组交换机、队列和绑定；可以有多个虚拟主机的原因是因为：在RabbitMQ中，用户只能在虚拟主机的粒度进行权限控制。因此，如果需要禁止A组访问B组的交换机/队列/绑定，必须为A和B分别创建一个虚拟主机。每一个RabbitMQ服务器都有一个默认的虚拟主机“/”。</li><li>交换机(Exchange)：用于转发消息，不做存储；如果没有 Queue bind 到 Exchange 的话，会直接丢弃掉 Producer 发送的消息。交换机中还有一个重要的东西：<code>路由键</code>,交换机发送到指定的队列，需要根据路由键来转发。</li><li>绑定：交换机和队列需要绑定，如上图所示为多对多关系。</li></ul><h4 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h4><h5 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h5><p>交换机有四种类型：Direct，Topic，Headers and Fanout</p><ul><li>Direct：’先匹配，再投送’。在绑定是设置一个<code>routing_key</code>，消息的<code>routing_key</code>匹配时，才会被投送到绑定的队列中去。</li><li>Topic：按自定义规则转发消息。</li><li>Headers：设置header attribute参数类型的交换机。</li><li>Fanout：转发消息到所有绑定队列。</li></ul><h6 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h6><p>Direct Exchange是RabbitMQ默认的交换机模式，根据key去匹配寻找队列。</p><p><img src="/images/RabbitMQ%E5%AD%A6%E4%B9%A0-%E4%B8%80%5C2.png" alt="Direct Exchage"></p><p>如图，X-Q1有一个 routing_key 为 orange；X-Q2有两个 routing_key 为 black、green；Q1接收 orange 的消息，Q2接收 black 和 green 的消息。</p><h6 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h6><p>转发消息主要根据通配符。这种交换机下，队列和交换机的绑定会定义一种路由模式，通配符在这种路由模式和路由键之间匹配后交换机才能转发消息。</p><p>这种模式下：</p><ul><li>路由键必须是一串字符，字符之间用 英文状态的句号隔开<code>(.)</code>，比如spring官网的RabbitMQ例子中的 routing_key – <code>foo.bar.#</code></li><li>路由键必须包含一个 <code>*</code> 或者 <code>#</code> 。主要用于匹配路由键指定位置的单词，可以使用两个通配符<ul><li><code>*</code>：指定位置的一个单词</li><li><code>#</code>：指定位置的零个或多个单词</li></ul></li></ul><h6 id="Headers-Exchange"><a href="#Headers-Exchange" class="headerlink" title="Headers Exchange"></a>Headers Exchange</h6><p>这个模式也是根据规则匹配，相较于Direct 和 Topic 固定的使用 routing_key , Headers是一个自定义匹配规则的类型。在交换器与队列绑定时，会设定一组键值对规则，消息中也包括一组键值对(Headers 属性 )，这些键值对有一对或者全部匹配时，消息就会被投送到对应的队列。</p><h6 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h6><p>广播消息，不管路由模式或者路由键，会把消息投送给绑定的全部队列，即使配置了 routing_key 也会被忽略。</p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点及基础</title>
      <link href="2019/05/29/vue-zhi-shi-dian-ji-ji-chu/"/>
      <url>2019/05/29/vue-zhi-shi-dian-ji-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>记录一次Vue知识点的讲解笔记以及一些前端小知识</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="ES5-数组"><a href="#ES5-数组" class="headerlink" title="ES5 数组"></a>ES5 数组</h3><p><code>map</code>：遍历，得到新数组</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 4, 6]</span></code></pre><p><code>find</code>：查找一个元素，返回元素</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><a id="more"></a><p><code>filter</code>：过滤，查找多个</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 3]</span></code></pre><p><code>reduce</code>：汇总数据</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> i<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><p><code>sort</code>：排序，返回负数：a &gt; b，返回正数：a &lt; b，返回 0 ：a = 0</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 2, 3] 升序</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [3, 2, 1] 降序，交换参数位置</span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><code>let</code> 代替 <code>var</code>，没有变量提升的BUG</li><li><code>const</code> 用于不可变，变量本身不可二次赋值</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><code>for in</code>：少用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>for of</code>：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="解构-amp-同构"><a href="#解构-amp-同构" class="headerlink" title="解构&amp;同构"></a>解构&amp;同构</h3><p>解构对象：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// before</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> obj<span class="token punctuation">.</span>a<span class="token keyword">const</span> b <span class="token operator">=</span> obj<span class="token punctuation">.</span>b<span class="token comment" spellcheck="true">// after</span><span class="token comment" spellcheck="true">// 同名同位置取出</span><span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> d <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> d<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>同构对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// { a: 1, b: 2 } 同名构成</span></code></pre><p>展开&amp;同构：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> e<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// { a: { e: 4, f; 5 }, b: 2, c: 1, d: 2, e: 4, f: 5, x: 2}</span></code></pre><p>取剩余&amp;解构：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span>  a<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a => 1</span><span class="token comment" spellcheck="true">// rest => { b: 2, c: 3 }</span></code></pre><p>数组解构：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 取剩余</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// a => 1</span><span class="token comment" spellcheck="true">// rest => [2, 3]</span></code></pre><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 旧的引入，通用</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>  <span class="token comment" spellcheck="true">// 新的引入，只能在顶层</span><span class="token keyword">import</span> axios <span class="token keyword">as</span> $ <span class="token keyword">from</span> <span class="token string">'axios'</span> <span class="token comment" spellcheck="true">// 别名</span></code></pre><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>组件属性的顺序：</p><ul><li><code>created()</code>：尽量不用</li><li><code>mounted()</code>：组件数据已初始化，渲染完成</li><li><code>data</code></li><li><code>computed</code>：根据 <code>data</code>整理出只读的数据</li><li><code>watch</code>：当<code>data</code>、<code>computed</code>数据变化（必须新数据和旧数据不一样才叫变化）触发的函数</li><li><code>methods</code>：组件的方法</li><li><code>components</code>：子组件</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>computed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/vue/2.6.6/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    fullName {{ fullName }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    listSum {{ listSum }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    deepB {{ deepB }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一般不用</span>      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateDeepB</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          firstName<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>          lastName<span class="token punctuation">:</span> <span class="token string">' world'</span><span class="token punctuation">,</span>          list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token punctuation">{</span>              b<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          deepB<span class="token punctuation">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// computed 数据来源必须是 data</span>      <span class="token comment" spellcheck="true">// 对 data 数据的二次加工，只读</span>      computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 无参数，只能从 this 取数据</span>        <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">listSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">+</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'obj.a.b'</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldvalue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watch obj.a.b'</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateDeepB</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">fullName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watch fullName'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">updateDeepB</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>deepB <span class="token operator">=</span> value        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="CLI3项目"><a href="#CLI3项目" class="headerlink" title="CLI3项目"></a>CLI3项目</h3><p>全局安装CLI3脚手架：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -g @vue/cli</code></pre><p><strong>如果使用 <code>npm i -g vue-cli</code>，安装的是CLI2</strong></p><p>创建项目 <code>vue-demo</code>：</p><pre class=" language-bash"><code class="language-bash">vue create vue-demo</code></pre><p>选项：</p><pre><code>(*) Babel            // js 语法转换器( ) TypeScript        // ts 支持，更严格( ) Progressive Web App (PWA) Support // WEB APP 支持( ) Router            // 路由，history mode 需要后端支持( ) Vuex            // 数据层支持( ) CSS Pre-processors // css 预处理语言支持(*) Linter / Formatter // 语法检查（eslint），格式化( ) Unit Testing    // 单元测试( ) E2E Testing        // 端到端测试</code></pre><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务-暂停、开始、更新、删除</title>
      <link href="2019/05/14/ding-shi-ren-wu-zan-ting-kai-shi-geng-xin-shan-chu/"/>
      <url>2019/05/14/ding-shi-ren-wu-zan-ting-kai-shi-geng-xin-shan-chu/</url>
      
        <content type="html"><![CDATA[<p>对于后端开发来说，定时任务的使用频率非常高，当然也少不了定时任务的管理了。最常见的应用就是单节点定时任务持久化的实现，需求稍微多一点就需要对定时任务管理，暂停、删除、恢复等；本文在SpringBoot&amp;quartz的项目上讲解；</p><p>单节点定时任务持久化的Demo地址：<a href="https://github.com/Passion-Logan/SpringBootDemo/tree/master/quartz_demo" target="_blank" rel="noopener">SpringBoot整合quartz完成定时任务单节点持久化</a>，Demo未添加定时任务的管理，可以再其基础上修改即可，需要手动添加定时任务实体。</p><a id="more"></a><p>放上定时任务实体字段：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"主键,添加是不能有值，修改时必须有值"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Id</span><span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">"ID"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ID"</span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ID"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> String id<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"定时定时任务名称,不能超过30个字符"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"定时任务名称不能为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"定时任务名称不能超过30个字符"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Basic</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"JOB_NAME"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String jobName<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"任务组,项目传1"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"任务组不能为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Basic</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"JOB_GROUP"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String jobGroup<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"任务ID"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"任务ID不能为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Basic</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"TASK_ID"</span><span class="token punctuation">)</span><span class="token keyword">private</span> Long taskId<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"时间表达式,只能含有英文、数字、空格、?、*、,、/、#"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"时间表达式不能为空"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"时间表达式不能超过60个字符"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Basic</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CRON_EXPRESSION"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String cronExpression<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"备注,不能超过300个字符"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"备注不能超过300个字符"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Basic</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"REMARK"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String remark<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>hidden <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"D_OPDT_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">private</span> Long dOpdt<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>hidden <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"D_FLAG_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">private</span> String dFlag<span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>hidden <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"D_OPER_"</span><span class="token punctuation">,</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token keyword">private</span> String dOper<span class="token punctuation">;</span></code></pre><p>代码之间的调用、注入省略掉了，本文只助于理解。</p><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>实体中判断是否为时间表达式可使用<code>CronExpression.isValidExpression</code>判断<code>false</code>为错误的时间表达式，反之正确。</p><pre class=" language-java"><code class="language-java">CronJobBean cronJobBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronJobBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>JobDataMap dataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cronJob"</span><span class="token punctuation">,</span> cronJobBean<span class="token punctuation">)</span><span class="token punctuation">;</span>quartzManager<span class="token punctuation">.</span><span class="token function">addJob</span><span class="token punctuation">(</span>cronJobBean<span class="token punctuation">,</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// controlelr层中接收两个参数：CronJobBean cronJob, JobDataMap dataMap</span><span class="token comment" spellcheck="true">// 一般单个任务一个类，类中写任务的逻辑，这里的任务类为CommonJob</span><span class="token comment" spellcheck="true">// 任务类 继承 QuartzJobBean 类， 实现 executeInternal 方法， 参数：jobExecutionContext 任务执行上下文</span><span class="token comment" spellcheck="true">// 构建一个任务的详情</span>JobDetail jobDetail <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>CommonJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>cronJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cronJob<span class="token punctuation">.</span><span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJobData</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建时间表达式</span>CronScheduleBuilder scheduleBuilder <span class="token operator">=</span> CronScheduleBuilder    <span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>cronJob<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个触发器</span>Trigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>cronJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cronJob<span class="token punctuation">.</span><span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将触发器加入到scheduler中</span>    scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="开始定时任务"><a href="#开始定时任务" class="headerlink" title="开始定时任务"></a>开始定时任务</h3><p>开始定时任务调用方法即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 开始一个定时任务** @param jobName* @param jobGroupName* @return void* @throws*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startJob</span><span class="token punctuation">(</span>String jobName<span class="token punctuation">,</span> String jobGroupName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>    JobKey jobKey <span class="token operator">=</span> JobKey<span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> jobGroupName<span class="token punctuation">)</span><span class="token punctuation">;</span>    scheduler<span class="token punctuation">.</span><span class="token function">triggerJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="暂停定时任务"><a href="#暂停定时任务" class="headerlink" title="暂停定时任务"></a>暂停定时任务</h3><p>暂定定时任务调用scheduler的方法即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 根据任务名称，任务组名，暂停一个定时任务** @param jobName      任务名称* @param jobGroupName 任务组名* @return void* @throws*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pauseJob</span><span class="token punctuation">(</span>String jobName<span class="token punctuation">,</span> String jobGroupName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>    JobKey jk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> jobGroupName<span class="token punctuation">)</span><span class="token punctuation">;</span>    scheduler<span class="token punctuation">.</span><span class="token function">pauseJob</span><span class="token punctuation">(</span>jk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>暂定一组定时任务：参数为<code>GroupMatcher&lt;JobKey&gt; groupmatcher</code>，也是调用<code>scheduler.pauseJobs(groupmatcher)</code>方法即可。</p><p>暂停触发器与暂停定时任务同理，只是修改key为<code>TriggerKey</code>，调用的方法为<code>pauseTrigger</code>。</p><h3 id="恢复定时任务"><a href="#恢复定时任务" class="headerlink" title="恢复定时任务"></a>恢复定时任务</h3><p>恢复定时任务直接调用方法。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 根据任务名称，任务组名，恢复一个定时任务** @param jobName      任务名称* @param jobGroupName 任务组名* @return void* @throws*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resumeJob</span><span class="token punctuation">(</span>String jobName<span class="token punctuation">,</span> String jobGroupName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>    JobKey jobKey <span class="token operator">=</span> JobKey<span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> jobGroupName<span class="token punctuation">)</span><span class="token punctuation">;</span>    scheduler<span class="token punctuation">.</span><span class="token function">resumeJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>恢复一组定时任务:参数为<code>GroupMatcher&lt;JobKey&gt; matcher</code>，调用<code>scheduler.resumeJobs(matcher)</code>即可。</p><p>恢复一组触发器与恢复定时任务同理，只是修改key为<code>TriggerKey</code>，调用的方法为<code>resumeTrigger</code>。</p><h3 id="更新定时任务"><a href="#更新定时任务" class="headerlink" title="更新定时任务"></a>更新定时任务</h3><p>根据传入的实体类重构job。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 更新一个job * * @param cronJob * @return void * @throws */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateJob</span><span class="token punctuation">(</span>CronJobBean cronJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        TriggerKey triggerKey <span class="token operator">=</span> TriggerKey            <span class="token punctuation">.</span><span class="token function">triggerKey</span><span class="token punctuation">(</span>cronJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cronJob<span class="token punctuation">.</span><span class="token function">getJobGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CronTrigger trigger <span class="token operator">=</span> <span class="token punctuation">(</span>CronTrigger<span class="token punctuation">)</span> scheduler<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建时间表达式</span>        CronScheduleBuilder scheduleBuilder <span class="token operator">=</span> CronScheduleBuilder            <span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>cronJob<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按新的cronExpression表达式重新构建trigger</span>        trigger <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getTriggerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按新的trigger重新设置job执行</span>        scheduler<span class="token punctuation">.</span><span class="token function">rescheduleJob</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="删除定时任务"><a href="#删除定时任务" class="headerlink" title="删除定时任务"></a>删除定时任务</h3><h4 id="删除定时任务以及相关的触发器"><a href="#删除定时任务以及相关的触发器" class="headerlink" title="删除定时任务以及相关的触发器"></a>删除定时任务以及相关的触发器</h4><p>删除定时任务涉及到相关触发器，全部删除需要手动删除。参数灵活使用，也可加上触发器名称，触发器组名称。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 参数为String jobName, String group</span>TriggerKey tk <span class="token operator">=</span> TriggerKey<span class="token punctuation">.</span><span class="token function">triggerKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>JobKey jk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobKey</span><span class="token punctuation">(</span>jobName<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">unscheduleJob</span><span class="token punctuation">(</span>tk<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduler<span class="token punctuation">.</span><span class="token function">deleteJob</span><span class="token punctuation">(</span>jk<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h4><pre><code>// 参数为String triggerName, String triggergroupTriggerKey tk = new TriggerKey(triggerName, triggergroup);scheduler.unscheduleJob(tk);</code></pre><h3 id="Quartz常用注解"><a href="#Quartz常用注解" class="headerlink" title="Quartz常用注解"></a>Quartz常用注解</h3><p><code>@PersistJobDataAfterExecution </code>：告诉Quartz在任务执行成功完毕之后（没有抛出异常），修改JobDetail的JobDataMap备份，以供下一个任务使用。</p><p>Quartz定时任务默认都是并发执行的，不会等待上一次任务执行完毕，只要间隔时间到就会执行, 如果定时任执行太长，会长时间占用资源，导致其它任务堵塞。</p><p><code>@DisallowConcurrentExecution</code>：禁止并发执行多个相同定义的JobDetail，可以并发执行同一个JobDetail。</p><p><code>建议两个注解同时使用！</code></p><p>文章最后附上Quartz 中文文档：<a href="https://www.w3cschool.cn/quartz_doc/" target="_blank" rel="noopener">Quartz中文文档</a></p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转)NamedParameterJdbcTemplate常用方法总结</title>
      <link href="2019/05/10/zhuan-namedparameterjdbctemplate-chang-yong-fang-fa-zong-jie/"/>
      <url>2019/05/10/zhuan-namedparameterjdbctemplate-chang-yong-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>NamedParameterJdbcTemplate类拓展了JdbcTemplate类，对JdbcTemplate类进行了封装从而支持命名参数特性。 </p><p>NamedParameterJdbcTemplate主要提供以下三类方法：execute方法、query及queryForXXX方法、update及batchUpdate方法。</p><a id="more"></a><p>1、插入/修改/删除数据，使用updateXXX方法</p><p><code>使用map作为参数</code></p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StringBuffer sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"select name from student where name like :name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token string">"管理员"</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>使用Bean作为参数</code></p><pre class=" language-java"><code class="language-java">Bean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertySqlParameterSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>使用MapSqlParameterSource作为参数</code></p><pre class=" language-java"><code class="language-java">MapSqlParameterSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapSqlParameterSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>template<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、查询</p><p><code>返回单行单列数据</code></p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer count <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select count(1) from student where name = :name"</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String 则用 String.class 接收；</span></code></pre><p><code>返回多行单列数据</code></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> map<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>返回单行数据</code></p><pre class=" language-java"><code class="language-java">Bean bean <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select  * from student where id = :id"</span><span class="token punctuation">,</span> map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Bean<span class="token operator">></span><span class="token punctuation">(</span>Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// BeanPropertyRowMapper会把下划线转化为驼峰属性</span><span class="token comment" spellcheck="true">// 结果对象可比实际返回字段多或者少</span></code></pre><p><code>返回Map形式的单行数据</code></p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>返回多行数据</code></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Bean<span class="token operator">></span> beanList <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同理，也可以使用SingleColumnRowMapper返回单行列表List&lt; String>,List&lt; Integer>等</span></code></pre><p><code>返回多行数据(Map)</code></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> map <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>转自：<a href="https://blog.csdn.net/u011179993/article/details/74791304" target="_blank" rel="noopener">NameParameterJdbcTemplate常用方法总结</a></p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastJSON的常用方法</title>
      <link href="2019/05/07/fastjson-de-chang-yong-fang-fa/"/>
      <url>2019/05/07/fastjson-de-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>FastJSON是阿里巴巴内部开发的用于后台处理json格式数据的一个工具包，项目中基本使用这个工具包，如下举例FastJSON工具的常用方法：</p><a id="more"></a><ul><li>将实体类转为json格式的字符串</li></ul><pre class=" language-java"><code class="language-java">JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>Bean<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将实体转为json对象</li></ul><pre class=" language-java"><code class="language-java">JSONObject json <span class="token operator">=</span> <span class="token punctuation">(</span>JSONObject<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将json格式字符串反序列化为json对象</li></ul><pre class=" language-java"><code class="language-java">JSONObject json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>反序列化为实体对象</li></ul><pre class=" language-java"><code class="language-java">Bean bean <span class="token operator">=</span> <span class="token punctuation">(</span>Bean<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将map转为jsonObject</li></ul><pre class=" language-java"><code class="language-java">JSONObject obj <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将jsonObject转为Map&lt;String，Object&gt;</li></ul><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将json转为List对象数组</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Bean<span class="token operator">></span> list <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> Bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将List转为JSONArray</li></ul><pre class=" language-java"><code class="language-java">JSONArray array <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>将JSONArray转为List</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">toJavaList</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">// 如果本事是数组格式的字符串，可以直接转换：</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> T<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>JSON数组形式字符串转换为List&lt;Map&lt;String, String&gt;&gt;的8种方法</strong></p><ul><li>利用JSONArray中的parse方法来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一种</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> listObjectFir <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">)</span> JSONArray<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">)</span> mapList <span class="token operator">:</span> listobjectFir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry <span class="token operator">:</span> mapList<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSONArray中的parseObject方法并指定返回类型来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第二种</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> listObjectSec <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span>List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> mapList <span class="token operator">:</span> listObjectSec<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry entry <span class="token operator">:</span> mapList<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSONArray中的parseArray方法来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第三种</span>JSONArray listObjectThir <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object mapList <span class="token operator">:</span> listObjectThir<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>mapList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSONArray中的parseArray方法并指定返回类型来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第四种</span>List listObjectFour <span class="token operator">=</span> JSONArray<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object mapList <span class="token operator">:</span> listObjectFour<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>mapList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSONObject中的parseArray方法来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第五种</span>JSONArray listObjectFifth <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object mapList <span class="token operator">:</span> listObjectFifth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>mapList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSONObject中的parseArray方法并指定返回类型来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第六种</span>List listObjectSix <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object mapList <span class="token operator">:</span> listObjectSix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>mapList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSON中的parseArray方法来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第七种</span>JSONArray listObjectSeven <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object mapList <span class="token operator">:</span> listObjectSeven<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>mapList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>利用JSON中的parseArray方法并指定返回类型来解析json数组字符串</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第八种</span>List listObjectEigh <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strArr<span class="token punctuation">,</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Object mapList <span class="token operator">:</span> listObjectEigh<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object entry <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>mapList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">)</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>待补充….</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle取数格式(FM)</title>
      <link href="2019/05/06/oracle-qu-shu-ge-shi-fm/"/>
      <url>2019/05/06/oracle-qu-shu-ge-shi-fm/</url>
      
        <content type="html"><![CDATA[<p>记一次开发过程中遇到的数据库问题</p><p>通常在做数据运算后，会想要指定格式的数据，格式化的方法有几种:TO_CHAR、TO_NUMBER、TO_BINARY_FLOAT、TO_BINART_DOUBLE，这里主要介绍TO_CHAR的方法。</p><a id="more"></a><p>TO_CHAR中使用FM格式来格式化数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">0.1966666</span><span class="token punctuation">,</span><span class="token string">'FM99990.00'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual</code></pre><p>执行结果为0.20</p><p>先不说结果不是０.19的问题，先说为什么会是这种格式。</p><p><code>FM99990.00</code>代表什么意思：</p><p>①9:如果存在数字则显示数字，反之显示空格</p><p>②0:存在数字就显示数字，反之显示0</p><p>③FM:删除因为9带来的空格</p><p><code>FM99990.00</code>意思是整数位5位，小数位2位</p><p>再来说说为什么结果会是0.20：</p><p>原因是因为使用格式化会引起四舍五入，如果数字大于格式化的数字，会被格式化为######的格式，解决办法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>trunc<span class="token punctuation">(</span><span class="token number">0.1966666</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'FM99990.00'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual</code></pre><p>Oracle支持的格式：</p><table><thead><tr><th align="center">Format</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">9</td><td align="center">代表一位任意数字</td></tr><tr><td align="center">.</td><td align="center">小数点</td></tr><tr><td align="center">D</td><td align="center">本地化小数点(NLS_NUMERIC_CHARACTER)</td></tr><tr><td align="center">,</td><td align="center">千分位</td></tr><tr><td align="center">G</td><td align="center">本地化千分位(NLS_NUMERIC_CHARACTER)</td></tr><tr><td align="center">S</td><td align="center">在前部或尾部添加正负号</td></tr><tr><td align="center">0</td><td align="center">在前部或尾部添加 0</td></tr><tr><td align="center">$</td><td align="center">在前部添加美元符号</td></tr><tr><td align="center">L</td><td align="center">添加本地化货币符号(NLS_CURRENCY)</td></tr><tr><td align="center">U</td><td align="center">添加DUAL货币符号(NLS_DUAL_CURRENCY)</td></tr><tr><td align="center">C</td><td align="center">添加ISO货币符号(NLS_ISO_CURRENCY)</td></tr><tr><td align="center">B</td><td align="center">添加空格如果整数部分为0</td></tr><tr><td align="center">X</td><td align="center">将10 进制转成16进制</td></tr><tr><td align="center">V</td><td align="center">将要格式化的值乘以10n</td></tr><tr><td align="center">EEEE</td><td align="center">科学计数法</td></tr><tr><td align="center">MI</td><td align="center">对于正数，在尾部添加空格；对于负数，在尾部添加负号</td></tr><tr><td align="center">PR</td><td align="center">对于正数，在尾部添加空格；对于负数，在尾部添加负号</td></tr><tr><td align="center">RN</td><td align="center">返回大写罗马数字</td></tr><tr><td align="center">rn</td><td align="center">返回小写罗马数字</td></tr><tr><td align="center">TM</td><td align="center">超过64位，返回科学计数法</td></tr></tbody></table><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Oracle知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot引入Thymeleaf</title>
      <link href="2018/04/06/springboot-yin-ru-thymeleaf/"/>
      <url>2018/04/06/springboot-yin-ru-thymeleaf/</url>
      
        <content type="html"><![CDATA[<p>在距离发表上一篇博文的时间整整一个月的今天，趁着放假更一篇，证明我还存在这个世界。<br>对于一个学习Java的童鞋，怎么能忘了学习SpringBoot这个框架呢！前段时间在学习的时候添加一个JSP页面却死活找不到页面，无奈换了Thymeleaf，官方橘子君也是推介的这个模板引擎，它完全可以替代JSP。</p><p>下面请跟上我的脚步，开车了：</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        </code></pre><a id="more"></a><h2 id="application-propertiesde-的文件中配置Thymeleaf"><a href="#application-propertiesde-的文件中配置Thymeleaf" class="headerlink" title="application.propertiesde 的文件中配置Thymeleaf"></a>application.propertiesde 的文件中配置Thymeleaf</h2><p>详情可以看这里<a href="https://blog.csdn.net/ice_lemon_g/article/details/73609020" target="_blank" rel="noopener">Spring-Boot配置文件thymeleaf模板配置项</a></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false    //关闭模版缓存</span><span class="token attr-name">spring.thymeleaf.encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8    //模版编码方式</span><span class="token attr-name">spring.thymeleaf.check-template-location</span><span class="token punctuation">=</span><span class="token attr-value">true    //检查模板位置是否存在</span>//SpringBoot中默认的路径为/templates/<span class="token attr-name">spring.thymeleaf.prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/    //在构建URL时预先查看名称的前缀</span><span class="token attr-name">spring.thymeleaf.suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.html    //构建URL时附加查看名称的后缀</span></code></pre><h2 id="创建templates文件"><a href="#创建templates文件" class="headerlink" title="创建templates文件"></a>创建templates文件</h2><p>在resources中New Directory，名称必须为templates！之后在其中创建自己的HTML文件就好。<br>文件结构如下：<br><img src="/images/SpringBoot%E5%BC%95%E5%85%A5Thymeleaf/1.png" alt="图一"></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//千万不能使用RestController注解，不然是无法返回界面的，只会返回Return中的内容。</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="HTML界面"><a href="#HTML界面" class="headerlink" title="HTML界面"></a>HTML界面</h2><p>在上面创建的templates文件夹中创建Controller中Return内容相对应的界面,例如我Controller中返回了一个index和一个hello，那么我就需要创建这两个界面，可以根据GetMapping的路径来访问不同的界面。</p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot相关学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git添加多个SSH密钥以及远程仓库</title>
      <link href="2018/03/06/git-tian-jia-duo-ge-ssh-mi-yao-yi-ji-yuan-cheng-cang-ku/"/>
      <url>2018/03/06/git-tian-jia-duo-ge-ssh-mi-yao-yi-ji-yuan-cheng-cang-ku/</url>
      
        <content type="html"><![CDATA[<p>使用过GitHub的小伙伴们都知道，GitHub创建私有仓库是收费的，对于一些不能公开的代码是没有办法在GitHub上进行备份的。<br>这里我推介一个国内的代码托管网站——<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>,它是一款国内的基于Git的研发协作平台，它是免费创建私有仓库的。操作基本与GitHub类似，对于使用GitHub的朋友上手起来非常容易。<br>这里我们在同一台电脑上同时添加GitHub和码云的仓库地址，私有的push到码云上，开源的push到GitHub上。</p><a id="more"></a><p>我们直接进入正题：</p><h2 id="Git添加多个SSH密钥"><a href="#Git添加多个SSH密钥" class="headerlink" title="Git添加多个SSH密钥"></a>Git添加多个SSH密钥</h2><p>有时候我们可能会在同一台电脑上使用多个SSH密钥，这里就会遇到权限问题。<br>如果你已经有了一套名为id_rsa的公秘钥，将要生成另外一个公钥，比如mayun，你也可以使用任何你喜欢的名字。</p><h3 id="生成新密钥"><a href="#生成新密钥" class="headerlink" title="生成新密钥"></a>生成新密钥</h3><p>打开你的GitBash键入：</p><pre><code>$ ssh-keygen -t rsa -C &quot;email@email.com&quot; -f ~/.ssh/mayun</code></pre><p>回车后，生成命名的公钥和生成默认公钥的步骤一样，全部跳过就行。<br>执行完成后，会在 ~/.ssh/目录下生成一个<code>mayun</code>和<code>mayun.pub</code>文件。</p><h3 id="配置SSH中的config文件"><a href="#配置SSH中的config文件" class="headerlink" title="配置SSH中的config文件"></a>配置SSH中的config文件</h3><p>在<code>~/.ssh</code>的路径下会有一个config文件，没有的自己新建一个。<br>编辑config文件：</p><pre><code>Host 别名HostName 主机名User 用户名IdentityFile 路径例如：Host git@github.comHostName https://github.comUser Passion-LoganIdentityFile C:/Users/Cody_/.ssh/id_rsaHost mayunHostName https://gitee.com/User 八阿哥IdentityFile C:/Users/Cody_/.ssh/mayun</code></pre><h3 id="添加新密钥到另一个地址中"><a href="#添加新密钥到另一个地址中" class="headerlink" title="添加新密钥到另一个地址中"></a>添加新密钥到另一个地址中</h3><p>上面我们生成了一个名为mayun的密钥，这里我们添加到码云的用户设置中，<br>具体操作参照我上一篇文章中的<a href="http://www.welcometohere.top/2018/02/26/%E4%BF%AE%E6%94%B9Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%8D%8F%E8%AE%AE%E4%B8%BASSH/#more" target="_blank" rel="noopener">配置Github账户的ssh key</a>就好。</p><h3 id="验证ssh权限"><a href="#验证ssh权限" class="headerlink" title="验证ssh权限"></a>验证ssh权限</h3><p>在GitBash中依次键入:</p><pre><code>$ ssh -T git@github.com$ ssh -T git@gitee.com如果出现如下提示，则说明有权限问题：$ Permission denied (publickey)</code></pre><h3 id="多用户出现权限问题的原因"><a href="#多用户出现权限问题的原因" class="headerlink" title="多用户出现权限问题的原因"></a>多用户出现权限问题的原因</h3><p>github使用SSH与客户端连接。如果是单用户（first），生成密钥对后，将公钥保存至GitHub，每次连接时SSH客户端发送本地私钥（默认~/.ssh/id_rsa）到服务端验证。单用户情况下，连接的服务器上保存的公钥和发送的私钥自然是配对的。但是如果是多用户 （first，second），我们在连接到second的帐号时，second保存的是自己的公钥，但是SSH客户端依然发送默认私钥，即first的私钥，那么这个验证自然无法通过。</p><h3 id="SSH密钥权限设置"><a href="#SSH密钥权限设置" class="headerlink" title="SSH密钥权限设置"></a>SSH密钥权限设置</h3><p>1、查看系统ssh-key代理，如果出现<code>Could not open a connection to your authentication agent.</code> 可以执行<code>ssh-agent bash</code> 命令后再执行下面的操作：</p><pre><code>$ ssh-add -l</code></pre><p>输出以下提示，就表示没有代理，可以执行一下命令，否则执行<code>ssh-add -D</code> 命令清除代理:</p><pre><code>$ The agent has no identities.</code></pre><p>2、依次添加不同的ssh代理</p><pre><code>$ ssh-add ~/.ssh/id_rsa$ ssh-add ~/.ssh/mayun</code></pre><p>3、验证ssh key<br>按照上面的依次键入:</p><pre><code>$ ssh -T git@github.com$ ssh -T git@gitee.com//分别会提示你在config文件中设置的User名字，没有的话就表示设置错误了。</code></pre><h3 id="ssh-agent讲解"><a href="#ssh-agent讲解" class="headerlink" title="ssh-agent讲解"></a>ssh-agent讲解</h3><p><code>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序</code><br>上面我们执行了<code>ssh-agent bash</code> 命令，是将bash挂到ssh-agent下面，只是一次性的;下次使用的时候还是需要对权限进行重新设置。</p><h2 id="添加多个远程仓库"><a href="#添加多个远程仓库" class="headerlink" title="添加多个远程仓库"></a>添加多个远程仓库</h2><p>在我们的Git中既然有多个ssh key，那就表示有多个地址。添加步骤如下：</p><h3 id="添加仓库地址"><a href="#添加仓库地址" class="headerlink" title="添加仓库地址"></a>添加仓库地址</h3><p>在GitBash中键入:</p><pre><code>$ git remote add name &lt;url&gt;    //name表示你要给这个远程仓库起的名字，url表示仓库地址例如：$ git remote add github https://github.com/xxx(仓库地址)$ git remote add gitee https://gitee.com/xxx(仓库地址)</code></pre><h3 id="push代码的正确步骤"><a href="#push代码的正确步骤" class="headerlink" title="push代码的正确步骤"></a>push代码的正确步骤</h3><p>有时候我们可能会遇到这样的错误<code>error: src refspec master does not match any</code>,引起这个错误的原因是目录中没有文件，空目录是不能被提交上去的。</p><pre><code>$ touch README   //也可以在创建室友仓库的时候创建$ git add -A    //提交所有改变的文件$ git commit -m &#39;first commit&#39;    //提交更新，并注释&#39;first commit&#39;$ git push -u name master    //name是指你创建的地址的别名</code></pre><p>如果push的时候出现<code>To git@github.com。。。master-&gt;master。。。</code>，这里有人说可以使用<code>git push -u origin master</code> 来解决，可是键入后依然没能解决这个问题，导致的原因是地址中的README文件不在本地代码目录中，解决办法如下：</p><pre><code>$ git pull --rebase name master     //这里name是你自己地址的别名。之后再执行push即可完成上传:$ git push -u name master</code></pre><p>参考文章：<br><a href="https://www.cnblogs.com/ayseeing/p/4445194.html" target="_blank" rel="noopener">《生成多个git ssh密钥》</a><br><a href="https://segmentfault.com/q/1010000008366409?_ea=1627673" target="_blank" rel="noopener">《Git添加多个远程仓库》</a><br><a href="https://www.jianshu.com/p/835e0a48c825" target="_blank" rel="noopener">《如何解决failed to push some refs to git》</a></p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Git配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Hexo博客上传协议为SSH</title>
      <link href="2018/02/26/xiu-gai-hexo-bo-ke-shang-chuan-xie-yi-wei-ssh/"/>
      <url>2018/02/26/xiu-gai-hexo-bo-ke-shang-chuan-xie-yi-wei-ssh/</url>
      
        <content type="html"><![CDATA[<p>在使用过Hexo博客一段时间过后，它突然报了一个错误，让我摸不着头脑，错误如下：</p><pre><code>......FATAL bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for &#39;https://github.com&#39;: Invalid argumentError: bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for &#39;https://github.com&#39;: Invalid argument......</code></pre><p>以我初中的英语水平还是大概能看懂这个报错的，就是说不能读取我的用户名的样子。</p><a id="more"></a><p>这个报错是hexo d命令导致的错误，无法部署(当然无法部署了，你是谁都不知道，还部署什么-.-)。</p><p>一番折腾过后，我发现网上有许多类似的问题，不过最后好像都没给出一个具体的原因，说是HTTPS协议问题，可是一开始HTTPS协议也可以使用，总之大部分回答试了过后都无法成功的解决它。最后只有改为SSH协议上传了。</p><p>按照以下步骤正确的修改为SSH协议上传：</p><h2 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h2><p>在你的GitBash中键入:</p><pre><code>$ ssh-keygen -t rsa -C ********@qq.com(换成你使用的邮箱地址)</code></pre><p>之后的都可以回车跳过，完成后会在你C盘的用户目录下生成一个id_rsa的公钥，具体路径看命令行中的<code>Your identification has been saved in *****</code>。</p><h2 id="配置Github账户的ssh-key"><a href="#配置Github账户的ssh-key" class="headerlink" title="配置Github账户的ssh key"></a>配置Github账户的ssh key</h2><p>打开id_rsa.pub文件，将一整串公钥copy下来。<br>进入你GitHub账户的设置，在ssh key中点击<code>New SSH key</code>,<br><img src="/images/%E4%BF%AE%E6%94%B9Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%8D%8F%E8%AE%AE%E4%B8%BASSH/1.png"><br>把刚刚copy出来的公钥粘贴到Key中，title放空就好<br><img src="/images/%E4%BF%AE%E6%94%B9Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%8D%8F%E8%AE%AE%E4%B8%BASSH/2.png"></p><h2 id="验证ssh-key"><a href="#验证ssh-key" class="headerlink" title="验证ssh key"></a>验证ssh key</h2><p>在GitBash中键入：</p><pre><code>$ ssh -T git@github.com</code></pre><p>若出现下面语句就说明你成功了！</p><pre><code>Hi Passion-Logan! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><h2 id="通过SSH部署到GitHub上"><a href="#通过SSH部署到GitHub上" class="headerlink" title="通过SSH部署到GitHub上"></a>通过SSH部署到GitHub上</h2><p>在你博客根目录打开GitBash，键入：</p><pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d    //不是每次都需要hexo clean，看个人。</code></pre><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建及优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tensorflow基础</title>
      <link href="2018/02/24/tensorflow-ji-chu/"/>
      <url>2018/02/24/tensorflow-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>简介：<br>tensorflow是一个依赖于python的开源软件库，主要用于<code>数值计算</code>。节点(Node)在图中表示数学操作，图中的线(edges)则表示在节点间相互联系的多维数据数组，即张量(tensor)。</p><a id="more"></a><p><code>温馨提示：浏览链接的时候记得上飞机哟。</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里是在windows系统中安装的，对于其他系统就不多做阐述了，按照官方文档来就好了。</p><h3 id="windows系统中安装tensorflow"><a href="#windows系统中安装tensorflow" class="headerlink" title="windows系统中安装tensorflow"></a>windows系统中安装tensorflow</h3><p><a href="https://www.tensorflow.org/install/install_windows" target="_blank" rel="noopener">windows中安装</a><br>在<code>cmd</code>下：</p><pre><code>//选择安装，输入后等待完成pip3 install --upgrade tensorflow    安装纯CPU版本pip3 install --upgrade tensorflow-gpu    安装GPU版本</code></pre><h3 id="在Ubuntu中安装tensorflow"><a href="#在Ubuntu中安装tensorflow" class="headerlink" title="在Ubuntu中安装tensorflow"></a>在Ubuntu中安装tensorflow</h3><p>按照官方文档来进行安装就好，<a href="https://www.tensorflow.org/install/install_linux" target="_blank" rel="noopener">戳进来</a>。</p><h3 id="在macOS中安装tensorflow"><a href="#在macOS中安装tensorflow" class="headerlink" title="在macOS中安装tensorflow"></a>在macOS中安装tensorflow</h3><p>按照官方文档来进行安装就好，<a href="https://www.tensorflow.org/install/install_mac" target="_blank" rel="noopener">戳进来</a>。</p><h3 id="从源安装tensorflow"><a href="#从源安装tensorflow" class="headerlink" title="从源安装tensorflow"></a>从源安装tensorflow</h3><p>按照官方文档来进行安装就好，<a href="https://www.tensorflow.org/install/install_sources" target="_blank" rel="noopener">戳进来</a>。</p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>从shell中调用python，如下所示：</p><pre><code>$ python</code></pre><p>在python交互式shell中输入以下短程序：</p><pre><code>&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant(&#39;Hello, TensorFlow!&#39;)&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello))</code></pre><p>如果系统输出以下内容，就已经安装成功了。准备开始编写TensorFlow程序：</p><pre><code>hello，TensorFlow！</code></pre><p>如果在sess = tf.Session()之后出现</p><pre><code>2018-02-20 15:20:42.753348: I C:\tf_jenkins\workspace\rel-win\M\windows\PY\36\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2</code></pre><p>不用管它，这个一个表示成功的信息。</p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> tensorflow学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python--短路计算</title>
      <link href="2018/02/24/python-duan-lu-ji-suan/"/>
      <url>2018/02/24/python-duan-lu-ji-suan/</url>
      
        <content type="html"><![CDATA[<p>一个很小的细节，可是却可以在你不注意的时候给你带来炒鸡大的麻烦！放在这里时刻提醒自己这个小坑：</p><a id="more"></a><pre><code>例：a = Trueprint(a and &#39;a=T&#39; or &#39;a=F&#39;)    //最后结果：a=T</code></pre><p>计算结果不是布尔类型，而是字符串 ‘a=T’，这是为什么呢？</p><p>因为Python把<code>0</code>、<code>空字符串&#39;&#39;</code>和<code>None</code>看成<code>False</code>，<code>其他数值</code>和<code>非空字符串</code>都看成<code>True</code>所以:</p><pre><code>True and &#39;a=T&#39; 计算结果是 &#39;a=T&#39;继续计算 &#39;a=T&#39; or &#39;a=F&#39; 计算结果还是 &#39;a=T&#39;</code></pre><ol><li><p>在计算<code>a and b</code> 时 ，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。</p></li><li><p>在计算<code>a or b</code> 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。</p></li></ol><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Python学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next主题优化第二弹</title>
      <link href="2018/02/09/next-zhu-ti-you-hua-di-er-dan/"/>
      <url>2018/02/09/next-zhu-ti-you-hua-di-er-dan/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章的基础之上，新增了一些常用的功能。</p><a id="more"></a><h2 id="博文中插入图片"><a href="#博文中插入图片" class="headerlink" title="博文中插入图片"></a>博文中插入图片</h2><p>为什么把这个优化放到第一位呢？之前我兴致勃勃的建好了博客，马上就开始写第一篇博文，噼里啪啦一阵敲过后，<br>开始插入图片，按照Markdown语法来插入，完全加载不出来！！<br>那好吧，我改成图片链接好了吧！完事过后一样不行，这让我情何以堪，图片都没法放！这怎么行，我的表情包不就没地方用了吗？？？<br>一通搜索过后，终于被我找到了解决办法。</p><p>首先打开 <code>主题配置</code> 文件，搜索 <code>post_asset_folder:</code>，设置为 <code>true</code>。</p><p>接着GitBash中键入一下命令 ：</p><pre><code>$ npm install hexo-asset-image --save</code></pre><p>完事过后重新生成你需要插入图片的的博文，这时你会发现 <code>hexo_blog\source\_posts</code> 中除了 <code>**.md</code> 文件，还有一个同名的文件夹。这个文件夹是装载你博文其他资源的，可以把图片放这里。</p><p>放入的正确姿势为 <code>![你想输入的替代文字](文件夹名称/图片名.jpg)</code>，替代文字可以不填写。</p><p>这样就完成了图片的放置。</p><h2 id="博文中插入音乐"><a href="#博文中插入音乐" class="headerlink" title="博文中插入音乐"></a>博文中插入音乐</h2><p>网上很多文章都是说的添加外链播放器，这方法不好，首先逼格不够高，其次影响SEO(别人说的)。<br>由于Hexo博客的刷新方式为全局刷新，建议不用在首页放置音乐，不然每次点击过后都需要去暂定音乐，<br>用户体验效果会大大降低。</p><p>首先我们需要一个音乐插件：</p><pre><code>$ npm install hexo-tag-aplayer@2.0.1    //不加版本号会默认安装2.0.0版本，这个版本会报错</code></pre><p>完成之后，在需要添加音乐的地方加入一下代码：</p><pre><code>//音乐以及音乐图片都以音乐链接的形式放入{% aplayer "小半" "陈粒" "https://xxx.com/4234.mp3" "https://xxx.com/1.jpg" "autoplay" %}</code></pre><p>如果你想放入歌单，可以参照文档来进行设置填写：<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">文档链接</a>。</p><h2 id="添加版权信息"><a href="#添加版权信息" class="headerlink" title="添加版权信息"></a>添加版权信息</h2><p>可能是网络上的其他文章年代有点久远吧，一个比一个麻烦，最后完事还不能用。。。。<br>Next目前的版本是集成了版权信息添加的，只需简单的几步即可完成。</p><p>第一步：<br>打开 <code>主题配置</code> 文件，搜索 <code>post_copyright:</code>，设置其中的 <code>enable:true</code></p><p>第二步:<br>在每篇博文的的title下添加 <code>copyright: true</code><br>可以在 <code>hexo_blog\scaffolds\post.md</code> 文件中添加模版信息，就不用每次都去新增一次。<br>设置过后会自动在你博文最后添加版权信息。</p><p>注：版权信息中文章链接中的URL需要修改 <code>站点配置</code> 中的URL，修改为你自己的域名即可。</p><h2 id="添加博文搜索功能"><a href="#添加博文搜索功能" class="headerlink" title="添加博文搜索功能"></a>添加博文搜索功能</h2><p>这里使用的搜索功能为Algolia，这个功能在Next的5.1.0版本引入，使用需要保证你的版本不会低于这个。<br>使用方式：<a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">文档链接</a></p><p><code>！！！！注意：</code></p><p>其中 <code>站点配置</code> 如下设置：</p><pre><code># Algoliaalgolia:  applicationID: &#39;Your applicationID&#39;  apiKey: &#39;Your apiKey&#39;  adminApiKey: &#39;Your adminApiKey&#39;  indexName: &#39;Your indexName&#39;  chunkSize: 5000</code></pre><p><code>每次在更新了博文后，都需要自己手动更新Index</code>，标签和分类页面会生成两个空白的Index页面，<br>不用去管它，可以直接去Algolia管理页面中删除这两个空白页面(每次更新过后都需要手动删除)。</p><p>更新Index的时候可以直接：</p><pre><code>//set可能会无效，由于所有命令都是在GitBash中键入的，故可直接export$ export HEXO_ALGOLIA_INDEXING_KEY=Your Search-Only API key$ hexo algolia</code></pre><h2 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h2><p>看了Next文档中提供的方法，来必力的最简单的方法，那我们就选择它了：<a href="http://theme-next.iissnan.com/third-party-services.html#livere" target="_blank" rel="noopener">文档链接</a>。</p><h2 id="添加博文及网站统计功能"><a href="#添加博文及网站统计功能" class="headerlink" title="添加博文及网站统计功能"></a>添加博文及网站统计功能</h2><p>使用过百度统计，腾讯分析，以及网络上其他的统计方法，感觉都非常麻烦，而且其他很大一部分的现在已经不能使用了，<br>这个过程是相当扎心。。。。。<br>最后我选择不蒜子统计，配置非常简单，几分钟就能解决你的问题。</p><p>使用方式：<a href="http://theme-next.iissnan.com/third-party-services.html#analytics-busuanzi" target="_blank" rel="noopener">文档链接</a>。</p><p>PS：至此Hexo系列的文章就暂告一段落了，以后有新的改变时再补充。</p><p>参考文章：<br><a href="http://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">《hexo生成博文插入图片》</a><br><a href="http://blog.csdn.net/time888/article/details/74203939" target="_blank" rel="noopener">《为NexT主题添加文章阅读量统计功能》</a><br><a href="http://tc9011.com/2016/12/24/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E3%80%81high%E4%B8%80%E4%B8%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%9D%91/" target="_blank" rel="noopener">《hexo添加音乐、high一下及一些坑》</a></p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建及优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next主题配置及优化</title>
      <link href="2018/02/07/next-zhu-ti-pei-zhi-ji-you-hua/"/>
      <url>2018/02/07/next-zhu-ti-pei-zhi-ji-you-hua/</url>
      
        <content type="html"><![CDATA[<p>本文采用的Next主题版本号为5.1.4，下载地址 <a href="https://github.com/iissnan/hexo-theme-next/releases/tag/v5.1.4" target="_blank" rel="noopener">Next</a>。点击下面的阅读全文开启此次的Next主题之旅吧！</p><a id="more"></a><p>话不多说，直接进入正题：</p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p>按照官方文档上的来就OK <a href="http://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="noopener">Next主题设定</a>。<br>标签页面以及分类页面其中的内容是Next主题根据你博文的标识自动添加的，并不需要我们手动添加</p><h3 id="博主头像设置"><a href="#博主头像设置" class="headerlink" title="博主头像设置"></a>博主头像设置</h3><p>打开 <code>主题配置</code> 文件，搜索 <code>avatar:</code> ，添加自己的头像图片路径，头像图片放到 <code>hexo_blog\source\images\</code> 目录下：</p><pre><code>avatar: /images/1.jpg</code></pre><h3 id="日志页面设置"><a href="#日志页面设置" class="headerlink" title="日志页面设置"></a>日志页面设置</h3><p>Next的日志页面默认是没有在菜单栏上显示的，显示需要新建一个日志页面 </p><pre><code>$ hexo new page archivesDirectory</code></pre><p>这里一定要注意日志页面是<code>archivesDirectory</code>而不是<code>archives</code>，这是我从坑里爬出后得出的结论！！<br>页面名称错误将无法显示内容。</p><h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p>官方文档已经说的很详细了，按照他说的就好<a href="http://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme" target="_blank" rel="noopener">设置代码高亮主题</a>。</p><h3 id="添加侧边栏社交链接"><a href="#添加侧边栏社交链接" class="headerlink" title="添加侧边栏社交链接"></a>添加侧边栏社交链接</h3><p>官方文档链接<a href="http://theme-next.iissnan.com/theme-settings.html#author-sites" target="_blank" rel="noopener">戳进来</a>。</p><h3 id="设置友情链接"><a href="#设置友情链接" class="headerlink" title="设置友情链接"></a>设置友情链接</h3><p>官方文档链接<a href="http://theme-next.iissnan.com/theme-settings.html#blogroll" target="_blank" rel="noopener">戳进来</a>。</p><h3 id="添加站点建立时间"><a href="#添加站点建立时间" class="headerlink" title="添加站点建立时间"></a>添加站点建立时间</h3><p>官方文档链接<a href="http://theme-next.iissnan.com/theme-settings.html#site-since" target="_blank" rel="noopener">戳进来</a>。</p><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="设置背景动画"><a href="#设置背景动画" class="headerlink" title="设置背景动画"></a>设置背景动画</h3><p>NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 false 来关闭动画。</p><p>编辑<code>主题配置文件(next\_config.yml)</code> ，搜索 use_motion，根据您的需求设置值为 true 或者 false 即可：</p><pre><code>use_motion: true  # 开启动画效果use_motion: false # 关闭动画效果</code></pre><h3 id="设置背景动画样式"><a href="#设置背景动画样式" class="headerlink" title="设置背景动画样式"></a>设置背景动画样式</h3><p>NexT 自带两种背景动画效果</p><p>编辑 <code>主题配置文件</code>， 搜索 canvas_nest 或 three_waves，根据您的需求设置值为 true 或者 false 即可：</p><p><code>注意： three_waves 在版本 5.1.1 中引入。只能同时开启一种背景动画效果。</code></p><pre><code># canvas_nestcanvas_nest: true //开启动画canvas_nest: false //关闭动画# three_wavesthree_waves: true //开启动画three_waves: false //关闭动画</code></pre><h3 id="设置博文背景透明"><a href="#设置博文背景透明" class="headerlink" title="设置博文背景透明"></a>设置博文背景透明</h3><p>打开 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code> 文件，搜索 <code>.content-wrap</code>，并删除其中的 <code>background</code> 设置。</p><h3 id="设置按钮颜色"><a href="#设置按钮颜色" class="headerlink" title="设置按钮颜色"></a>设置按钮颜色</h3><p>Next主题的样式一般是不会修改的，如果需要，这里主题的作者为我们留了一个自定义样式的文件。<br>打开 <code>themes\next\source\css\_custom\custom.styl</code> 文件，在其中直接编写你想要的样式：</p><pre><code>//编写你自己的按钮样式.btn {    background: }</code></pre><h3 id="设置站点概况背景颜色"><a href="#设置站点概况背景颜色" class="headerlink" title="设置站点概况背景颜色"></a>设置站点概况背景颜色</h3><p>打开 <code>themes\next\source\css\_schemes\Pisces\_sidebar.styl</code> 文件，搜索 <code>.sidebar-inner</code>，修改其中的 <code>background</code>就OK了。</p><h3 id="设置菜单栏背景颜色"><a href="#设置菜单栏背景颜色" class="headerlink" title="设置菜单栏背景颜色"></a>设置菜单栏背景颜色</h3><p>打开 <code>next\source\css\_schemes\Pisces\_layout.styl</code> 文件，搜索 <code>.header-inner</code>，同样修改其中的 <code>background</code>。</p><h3 id="修改-中的代码块样式"><a href="#修改-中的代码块样式" class="headerlink" title="修改 `` 中的代码块样式"></a>修改 `` 中的代码块样式</h3><p>打开 <code>\themes\next\source\css\_custom\custom.styl</code> 文件，在里面添加如下代码，颜色可自定义：</p><pre><code>code {    color: #ff7600;    background: #fbf7f8;    margin: 2px;}// 大代码块的自定义样式.highlight, pre {    margin: 5px 0;    padding: 5px;    border-radius: 3px;}.highlight, code, pre {    border: 1px solid #d6d6d6;}</code></pre><h3 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h3><p>打开 <code>themes\next\source\css\_common\components\post\post.styl</code> 文件，在末尾添加如下css样式：</p><pre><code>// 文章内链接文本样式，颜色可自己定义.post-body p a{  color: #0593d3;  border-bottom: none;  border-bottom: 1px solid #0593d3;  &amp;:hover {    color: #fc6423;    border-bottom: none;    border-bottom: 1px solid #fc6423;  }}</code></pre><h3 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h3><p>打开 <code>/themes/next/layout/_macro/post.swig</code> 文件，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将#换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。</p><h3 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h3><p>GitHub样式有两种，<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">样式一</a>，<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">样式二</a>。戳进去选择自己喜欢的样式，并复制其中的代码。</p><p>打开 <code>themes/next/layout/_layout.swig</code> 文件，在 <code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>，放入你复制的代码，并把href改成你自己的GitHub地址。</p><h3 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h3><p>这个版本的Next，已经为我们写好了一些加载条的样式，只需要修改 <code>主题配置文件</code> 就好了<br>打开 <code>主题配置文件</code>，搜索 <code>pace:</code> 。将 <code>pace: false</code> 改为 <code>pace: true</code> 就完成了。<br>除此之外，我们还可以选择加载条条的样式，只需修改 <code>pace_theme</code> 就好。</p><h3 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h3><p>打开 <code>themes/next/layout/_partials/footer.swig</code> 文件，使用 <code>&lt;!--- ---&gt;</code>注释</p><pre><code>{% if theme.footer.powered %}.....{% endif %}  //文章底部的</code></pre><p>参考文章：<br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">《hexo的next主题个性化教程:打造炫酷网站》</a><br><a href="http://blog.csdn.net/qq_22844483/article/details/70157310" target="_blank" rel="noopener">《hexo博客框架–nexT主题进阶设定》</a></p><p><code>Next主题优化第二弹</code>预告：</p><ul><li>博文中插入图片</li><li>博文中插入音乐</li><li>添加版权信息</li><li>添加博文搜索功能</li><li>添加评论功能</li><li>添加博文及网站的统计功能</li></ul><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建及优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub+Hexo+Next搭建自己的博客网站</title>
      <link href="2018/02/05/github-hexo-next-da-jian-zi-ji-de-bo-ke-wang-zhan/"/>
      <url>2018/02/05/github-hexo-next-da-jian-zi-ji-de-bo-ke-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>看着大佬们的个人网站，我羡慕不已，YY着啥时候我也能有一个自己的网站呀（叹了口气<del>）！<br>直到某天课堂上闲逛博客时看到一个炒鸡炫的博客，去询问过后了解了Hexo这东西。下来我一想，我不会写难道还不会用吗!?于是</del>本文将演示如何使用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 以及 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 搭建一个属于自己的博客网站，帮助更多的小伙伴来交(zhuang)流(bi)！</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="#前言"></a>#前言</h2><p>早已有写一个自己网站的想法，奈何技术还不支持自己从零开始写。那怎么办呢，想半天总不能做语言上的巨人行动上的矮子吧。<br>趁着放假有空咱撸起袖子就是干！<br>Hexo博客主题有很多，这里我选择的是 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a>，为啥呢？(不为啥，第一的不用它用什么，说的好听是简洁，不好听就是简单，个人感觉其他的也差不多)。<br>这里给大家安利一个古老的排名 <a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a>， Hexo主题库 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">戳进来</a> 选择自己喜欢的主题</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">GitBash</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node</a></li><li>一个域名(可以没有)</li></ul><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><p>所有命令均是再GitBash下完成</p><h3 id="安装Hexo及初始化"><a href="#安装Hexo及初始化" class="headerlink" title="安装Hexo及初始化"></a>安装Hexo及初始化</h3><pre><code>$ npm install hexo -g</code></pre><p>建立一个博客文件夹(hexo_blog)，此路径下执行以下命令：</p><pre><code>$ hexo init hexo_blog    //初始化生成 Hexo 相关代码$ cd hexo_blog            $ npm install        //自动读取项目中的package.json文件</code></pre><p>生成如下目录:</p><pre><code>-- hexo_blog    ├── node_modules    //NPM安装依赖包    ├── scaffolds    ├── source    |   └── _posts      //新建文件存放位置    ├── themes          //相关主题存放位置    |   └── next    |         └── _config.yml      //主题配置文件    ├── _config.yml     //站点配置文件    ├── .gitignore    ├── db.json    └── package.json</code></pre><h3 id="主题下载及应用"><a href="#主题下载及应用" class="headerlink" title="主题下载及应用"></a>主题下载及应用</h3><p>以 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next</a> 为例：<br>    在README文档中下载最新发布的版本后解压放到 <code>hexo_blog/themes</code> 目录下，主题文件夹名称为你的主题名称</p><h3 id="博客预览"><a href="#博客预览" class="headerlink" title="博客预览"></a>博客预览</h3><p>至此博客也就初步形成了，命令行中键入：</p><pre><code>$ hexo s --debug</code></pre><h2 id="托管到GitHub"><a href="#托管到GitHub" class="headerlink" title="托管到GitHub"></a>托管到GitHub</h2><p>GitHub为每一个用户都提供了一个免费域名，这里没有域名的小伙伴就方便一点了。<br>首先创建一个仓库，点击右上角头像旁的+号    new repository</p><p><img src="/images/GitHub-Hexo-Next%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/2.png"></p><p>接着输入自己的仓库名称：用户名.github.io(只能这样)</p><p><img src="/images/GitHub-Hexo-Next%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/3.png"></p><p>完成后点击下方的Create repository完成创建</p><p>上传你的代码，需要安装一个插件：</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>然后修改你的站点配置文件：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: ...../flyoob.github.io.git      项目URL</code></pre><p>接着就是见证奇迹的时刻了：</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d    //并不是每次都需要加上hexo clean 随意就好</code></pre><p>然后就会出现一系列的问题 <code>.....Please tell me who you are</code> (WTF！！！)</p><p>不要担心这只是你没有告诉Git你的GitHub信息而已，按照它说的加上就好了</p><pre><code>#输入下面两句，并且替换成你的GitHub名字和邮箱git config --global user.email &quot;your@email.com&quot;git config --global user.name &quot;Your Name&quot;</code></pre><p>最后再次提交就没问题了，第一次要验证信息才行：</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>当最后一行出现 <code>INFO  Deploy done: git</code> 就表示成功了！！！</p><p>之后就可以通过 <code>https://用户名.github.io/</code> 来访问自己的博客了</p><h2 id="域名解析到GitHub地址"><a href="#域名解析到GitHub地址" class="headerlink" title="域名解析到GitHub地址"></a>域名解析到GitHub地址</h2><p>以万网域名为例：<br><img src="/images/GitHub-Hexo-Next%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/4.png"></p><p>接着在自己的GitHub项目中添加一个CNAME文件，文件内容是你的域名<br><img src="/images/GitHub-Hexo-Next%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/5.png"></p><p>注:由于每次上传过后都会覆盖文件，每次都需要去GitHub中再次创建一个CNAME文件，这样非常麻烦。<br>可以在你本地的 <code>hexo_blog/source</code> 中添加一个CNAME文件，就不用每次上传过后都去创建一次了</p><script type="text/javascript">    //防复制 防右键    document.oncontextmenu=new Function("event.returnValue=false;");    document.onselectstart=new Function("event.returnValue=false;");    //防止注入frame    if (top.location != self.location)top.location=self.location;</script>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建及优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
